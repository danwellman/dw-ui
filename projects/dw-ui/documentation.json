{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "PasswordBoxComponent",
            "id": "component-PasswordBoxComponent-1c503deb5986b2f1472e2938af4062fa59825acfc802a6b98de968046b71629f078d916a8d1b9ecfdf60710b7648fcbcf47c2a1093ff539446e9fc4187194608",
            "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: forwardRef(() => PasswordBoxComponent),\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, multi: true, useExisting: forwardRef(() => PasswordBoxComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "dwui-password-box",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-box.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "enableChoose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "enableShowHide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "enableStrengthMeter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconChoose",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconHide",
                    "defaultValue": "faEyeSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconShow",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "minStrength",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "switchToAndFocusInputAfterGenerate",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "passwordStrengthChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "passwordTypeChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "passwordValueChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "chooseIconElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "enableChoose",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "enableShowHide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "enableStrengthMeter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconChoose",
                    "defaultValue": "faPenToSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconChooseTitle",
                    "defaultValue": "input<string>('Generate strong password for me')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "iconHide",
                    "defaultValue": "faEyeSlash",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconHideTitle",
                    "defaultValue": "input<string>('Hide password')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "iconShow",
                    "defaultValue": "faEye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "iconShowTitle",
                    "defaultValue": "input<string>('Show password')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "input<string>(uuid())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | null",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "label",
                    "defaultValue": "input<string>('Password:')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "minStrength",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "passwordStrengthChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "passwordTypeChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "passwordValueChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "strengthMeterAriaLabel",
                    "defaultValue": "input<string>('Password strength meter')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "strengthMeterMode",
                    "defaultValue": "input<StrengthMeterMode>('multi')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "strengthValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "strengthWord",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "switchToAndFocusInputAfterGenerate",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        125
                    ],
                    "required": false
                },
                {
                    "name": "type",
                    "defaultValue": "'password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PasswordBoxType",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "generatePassword",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChooseIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getInput",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPasswordStrength",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "inputChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "switchType",
                    "args": [
                        {
                            "name": "type",
                            "type": "PasswordBoxType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "PasswordBoxType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "true | { invalid: boolean; }",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, input, output, forwardRef, ChangeDetectionStrategy, ChangeDetectorRef, Renderer2 } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ControlValueAccessor, FormsModule, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormControl } from '@angular/forms';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { faEye, faEyeSlash, IconDefinition, faPenToSquare } from '@fortawesome/free-regular-svg-icons';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { passwordStrength } from 'check-password-strength';\r\nimport * as password from 'secure-random-password';\r\n\r\nexport type PasswordBoxType = 'password' | 'text';\r\nexport type StrengthChangedEvent = { strengthWord: string; strengthId: number };\r\nexport type ValueChangedEvent = { value: string };\r\nexport type TypeChangedEvent = { type: PasswordBoxType };\r\nexport type RequiredStrength = 1 | 2 | 3;\r\nexport type StrengthMeterMode = 'multi' | 'duotone';\r\n\r\n@Component({\r\n  selector: 'dwui-password-box',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, FontAwesomeModule],\r\n  templateUrl: './password-box.component.html',\r\n  styleUrl: './password-box.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      multi: true,\r\n      useExisting: forwardRef(() => PasswordBoxComponent),\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      multi: true,\r\n      useExisting: forwardRef(() => PasswordBoxComponent),\r\n    }\r\n  ],\r\n  host: {\r\n    '(change)': 'onChange($event.target.value)',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PasswordBoxComponent implements ControlValueAccessor {\r\n  public id = input<string>(uuid());\r\n  public label = input<string>('Password:');\r\n  public minStrength = input<RequiredStrength>(3);\r\n  public enableShowHide = input<boolean>(true);\r\n  public iconShow = input<IconDefinition>(faEye);\r\n  public iconShowTitle = input<string>('Show password');\r\n  public iconHide = input<IconDefinition>(faEyeSlash);\r\n  public iconHideTitle = input<string>('Hide password');\r\n  public enableStrengthMeter = input<boolean>(true);\r\n  public strengthMeterAriaLabel = input<string>('Password strength meter');\r\n  public strengthMeterMode = input<StrengthMeterMode>('multi');\r\n  public enableChoose = input<boolean>(true);\r\n  public iconChoose = input<IconDefinition>(faPenToSquare);\r\n  public iconChooseTitle = input<string>('Generate strong password for me');\r\n  public switchToAndFocusInputAfterGenerate = input<boolean>(true);\r\n\r\n  public passwordStrengthChanged = output<StrengthChangedEvent>();\r\n  public passwordValueChanged = output<ValueChangedEvent>();\r\n  public passwordTypeChanged = output<TypeChangedEvent>();\r\n\r\n  public value = '';\r\n  public type: PasswordBoxType = 'password';\r\n\r\n  public onChange: (value: string) => void = (value: string) => undefined;\r\n  public onTouched: () => void = () => undefined;\r\n\r\n  protected isDisabled: boolean;\r\n  protected strengthWord: string;\r\n  protected strengthValue = 0;\r\n\r\n  private chooseIconElement: HTMLElement | null;\r\n  private inputElement: HTMLElement | null;\r\n\r\n  constructor(private cdr: ChangeDetectorRef, private renderer: Renderer2) {}\r\n\r\n  public validate({ value }: FormControl) {\r\n    const strength = passwordStrength(value).id;\r\n    const isNotValid = strength < this.minStrength();\r\n\r\n    if (isNotValid) return isNotValid && { invalid: true };\r\n    return true;\r\n  }\r\n\r\n  public writeValue(value: string): void {\r\n    this.value = value;\r\n    this.passwordValueChanged.emit({ value });\r\n    this.cdr.markForCheck();\r\n    if (this.onChange) {\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  public registerOnChange(fn: (value: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n    const input = this.getInput();\r\n    this.renderer.setProperty(input, 'disabled', isDisabled === true ? isDisabled : null);\r\n  }\r\n\r\n  public switchType(type: PasswordBoxType): void {\r\n    if (this.type !== type) {\r\n      this.type = type;\r\n      this.passwordTypeChanged.emit({ type });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  protected inputChanged(event: Event): void {\r\n    const existingWordValue = this.strengthWord;\r\n    const inputVal = (event.target as HTMLInputElement)?.value;\r\n\r\n    this.getPasswordStrength(inputVal);\r\n\r\n    if (!inputVal) {\r\n      this.strengthWord = '';\r\n      this.strengthValue = 0;\r\n    }\r\n\r\n    if (this.strengthWord !== existingWordValue) {\r\n      this.passwordStrengthChanged.emit({ strengthWord: this.strengthWord, strengthId: this.strengthValue });\r\n    }\r\n  }\r\n\r\n  protected generatePassword(event: Event): void {\r\n    event.preventDefault();\r\n\r\n    const existingWordValue = this.strengthWord;\r\n    const generated = password.randomString();\r\n\r\n    this.writeValue(generated);\r\n    this.getPasswordStrength(generated);\r\n\r\n    if (this.strengthWord !== existingWordValue) {\r\n      this.passwordStrengthChanged.emit({ strengthWord: this.strengthWord, strengthId: this.strengthValue });\r\n    }\r\n\r\n    this.onTouched();\r\n\r\n    if (this.switchToAndFocusInputAfterGenerate()) {\r\n      const chooseIconEl = this.getChooseIcon();\r\n      const inputEl = this.getInput();\r\n\r\n      if (chooseIconEl && inputEl) {\r\n        this.switchType('text');\r\n        chooseIconEl.blur();\r\n        inputEl.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  private getChooseIcon(): HTMLElement | null {\r\n    if (!this.chooseIconElement) {\r\n      this.chooseIconElement = document.getElementById('choose');\r\n    }\r\n    return this.chooseIconElement;\r\n  }\r\n\r\n  private getInput(): HTMLElement | null {\r\n    if (!this.inputElement) {\r\n      this.inputElement = document.querySelector('dwui-password-box input');\r\n    }\r\n\r\n    return this.inputElement;\r\n  }\r\n\r\n  private getPasswordStrength(password: string): void {\r\n    const strength = passwordStrength(password);\r\n    const strengthWord = strength.value.toLowerCase().replace(' ', '');\r\n    this.strengthValue = strength.id;\r\n    if (this.strengthMeterMode() === 'multi') {\r\n      if (strengthWord === 'tooweak') {\r\n        this.strengthWord = 'weak';\r\n      } else {\r\n        this.strengthWord = strengthWord;\r\n      }\r\n    } else {\r\n      if (this.strengthValue < this.minStrength()) {\r\n        this.strengthWord = 'tooweak';\r\n      } else {\r\n        this.strengthWord = 'strong';\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./password-box.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"dwui-outer\" [ngClass]=\"{ 'disabled': isDisabled }\">\r\n  @if (label()) {\r\n    <label class=\"dwui-label\" [for]=\"id()\">{{label()}}</label>\r\n  }\r\n  <div\r\n    class=\"dwui-input-wrap\"\r\n    [ngClass]=\"{\r\n      'with-icon': enableShowHide() || enableChoose(),\r\n      'both-icons': enableShowHide() && enableChoose(),\r\n      'icon-show': enableShowHide(),\r\n      'icon-choose': enableChoose(),\r\n    }\"\r\n  >\r\n    <input [id]=\"id()\" [type]=\"type\" [value]=\"value\" (input)=\"inputChanged($event)\" (blur)=\"onTouched()\" />\r\n    @if (enableShowHide() || enableChoose()) {\r\n      <div class=\"dwui-icon-wrap\">\r\n        @if (enableShowHide()) {\r\n          @if (type === 'password') {\r\n            <fa-icon\r\n              [tabIndex]=\"0\"\r\n              [a11yRole]=\"'button'\"\r\n              [title]=\"iconShowTitle()\"\r\n              [icon]=\"iconShow()\"\r\n              (click)=\"switchType('text')\"\r\n              (keyup.space)=\"switchType('text')\"\r\n              (keyup.enter)=\"switchType('text')\"\r\n            ></fa-icon>\r\n          }\r\n          @else {\r\n            <fa-icon\r\n              [tabIndex]=\"0\"\r\n              [a11yRole]=\"'button'\"\r\n              [title]=\"iconHideTitle()\"\r\n              [icon]=\"iconHide()\"\r\n              (click)=\"switchType('password')\"\r\n              (keyup.space)=\"switchType('password')\"\r\n              (keyup.enter)=\"switchType('password')\"\r\n            ></fa-icon>\r\n          }\r\n        }\r\n        @if (enableChoose()) {\r\n          <fa-icon\r\n              id=\"choose\"\r\n              [tabIndex]=\"0\"\r\n              [a11yRole]=\"'button'\"\r\n              [title]=\"iconChooseTitle()\"\r\n              [icon]=\"iconChoose()\"\r\n              (click)=\"generatePassword($event)\"\r\n              (keyup.space)=\"generatePassword($event)\"\r\n              (keyup.enter)=\"generatePassword($event)\"\r\n            ></fa-icon>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (enableStrengthMeter()) {\r\n    <div\r\n      role=\"meter\"\r\n      aria-valuemin=\"0\"\r\n      aria-valuemax=\"3\"\r\n      attr.aria-label=\"{{ strengthMeterAriaLabel() }}\"\r\n      attr.aria-valuenow=\"{{ strengthValue }}\"\r\n      class=\"dwui-password-strength-wrap {{ strengthMeterMode() }}\"\r\n      [ngClass]=\"strengthWord || ''\"\r\n    >\r\n      @if (strengthMeterMode() === 'duotone') {\r\n        <div\r\n          class=\"strength-duo-wrap\"\r\n          [ngClass]=\"(strengthValue === 0 || strengthValue === 1) ? 'one' : (strengthValue === 2) ? 'two' : (strengthValue === 3) ? 'three' : ''\"\r\n        >\r\n          <div aria-hidden=\"true\"></div>\r\n          <div aria-hidden=\"true\"></div>\r\n          <div aria-hidden=\"true\"></div>\r\n        </div>\r\n      }\r\n      @else {\r\n        <div aria-hidden=\"true\"></div>\r\n        <div aria-hidden=\"true\"></div>\r\n        <div aria-hidden=\"true\"></div>\r\n      }\r\n    </div>\r\n  }\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "CustomIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    iconShow: faThumbsUp,\r\n    iconHide: faThumbsDown,\r\n    iconChoose: faFaceSurprise,\r\n  },\r\n}"
            },
            {
                "name": "CustomLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Secret word',\r\n  },\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Password',\r\n  },\r\n}"
            },
            {
                "name": "LowStrength",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    minStrength: 2,\r\n    strengthMeterMode: 'duotone',\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PasswordBoxComponent>",
                "defaultValue": "{\r\n  title: 'Components/password-box',\r\n  component: PasswordBoxComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    iconChoose: {\r\n      description: 'The FontAwesome icon to use for the \"choose password for me\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faPenToSquare'\r\n        },\r\n      },\r\n    },\r\n    iconChooseTitle: {\r\n      description: 'The title for the \"choose\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Generate strong password for me',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Generate strong password for me'\r\n      }\r\n    },\r\n    iconHide: {\r\n      description: 'The FontAwesome icon to use for the \"hide password\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faEyeSlash'\r\n        }\r\n      },\r\n    },\r\n    iconHideTitle: {\r\n      description: 'The title for the \"hide password\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Hide password',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Hide password',\r\n      }\r\n    },\r\n    iconShow: {\r\n      description: 'The FontAwesome icon to use for the \"show password\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faEye'\r\n        }\r\n      },\r\n    },\r\n    iconShowTitle: {\r\n      description: 'The title for the \"show password\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Show password',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Show password',\r\n      }\r\n    },\r\n    enableChoose: {\r\n      description: 'Whether to enable the \"choose password for me\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    enableShowHide: {\r\n      description: 'Whether to enable the \"show/hide password\" buttons',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    enableStrengthMeter: {\r\n      description: 'Whether to enable the strength meter below the input',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    id: {\r\n      description: 'The id for the input element',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'an auto-generated UUID',\r\n        },\r\n      },\r\n    },\r\n    label: {\r\n      description: 'The text content of the label element',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Password',\r\n        },\r\n      },\r\n    },\r\n    minStrength: {\r\n      description: 'The minium strength required for the password to be valid',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'RequiredStrength (1 | 2 | 3)',\r\n        },\r\n        defaultValue: {\r\n          summary: '3',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'number',\r\n        value: 3,\r\n        max: 3,\r\n        min: 1,\r\n      },\r\n    },\r\n    onChange: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    onTouched: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    passwordStrengthChanged: {\r\n      description: 'An event emitted when the strength of the password changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'StrengthChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    passwordTypeChanged: {\r\n      description: 'An event emitted when the type attribute of the input changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'TypeChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    passwordValueChanged: {\r\n      description: 'An event emitted when the value of the input changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'ValueChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    registerOnChange: {\r\n      description: 'Register an onChange function',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: '(value: string) => void'\r\n        },\r\n      }\r\n    },\r\n    registerOnTouched: {\r\n      description: 'Register an onTouched function',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: '() => void'\r\n        },\r\n      }\r\n    },\r\n    setDisabledState: {\r\n      description: 'Set isDisabled to passed value',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: 'true | false'\r\n        },\r\n      }\r\n    },\r\n    strengthMeterAriaLabel: {\r\n      description: 'The aria-label for the password strength meter',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Password strength meter',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Password strength meter',\r\n      }\r\n    },\r\n    strengthMeterMode: {\r\n      description: 'The mode of the password strength meter',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'multi',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'multi',\r\n      }\r\n    },\r\n    switchToAndFocusInputAfterGenerate: {\r\n      description: 'Whether to enable behavior where the password is displayed and input is focused after generating a password',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    switchType: {\r\n      description: 'Change the input type attribute',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: 'password | text'\r\n        }\r\n      },\r\n    },\r\n    type: {\r\n      description: 'The value of the type attribute on the input',\r\n      table: {\r\n        category: 'properties',\r\n        type: {\r\n          summary: 'password | text',\r\n        },\r\n        defaultValue: {\r\n          summary: '',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'password',\r\n      }\r\n    },\r\n    validate: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    value: {\r\n      description: 'The value of the input',\r\n      table: {\r\n        category: 'properties',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: '',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true,\r\n      }\r\n    },\r\n  },\r\n  args: {\r\n    passwordStrengthChanged: fn(),\r\n    passwordTypeChanged: fn(),\r\n    passwordValueChanged: fn(),\r\n  },\r\n  parameters: {\r\n    cssprops: {\r\n      iconHoverColor: {\r\n        category: 'icons',\r\n        value: 'initial',\r\n        description: 'The color of the icons',\r\n      },\r\n      iconHoverFocusOpacity: {\r\n        category: 'icons',\r\n        value: '.5',\r\n        description: 'The \"hover style\" of the icons',\r\n      },\r\n      iconHoverFocusOutline: {\r\n        category: 'icons',\r\n        value: 'none',\r\n        description: 'The focus outline style of the icons',\r\n      },\r\n      inputBorderColor: {\r\n        category: 'input',\r\n        value: '#000',\r\n        description: 'The color of the border for the input',\r\n      },\r\n      inputBorderRadius: {\r\n        category: 'input',\r\n        value: '.25rem',\r\n        description: 'The border-radius of the input',\r\n      },\r\n      inputBorderStyle: {\r\n        category: 'input',\r\n        value: 'solid',\r\n        description: 'The border-style of the input',\r\n      },\r\n      inputBorderWidth: {\r\n        category: 'input',\r\n        value: '2px',\r\n        description: 'The border-width of the input',\r\n      },\r\n      inputFontFamily: {\r\n        category: 'input',\r\n        value: 'Arial, Helvetica, sans-serif',\r\n        description: 'The font-family of the input',\r\n      },\r\n      inputFontSize: {\r\n        category: 'input',\r\n        value: '16px',\r\n        description: 'The font-size of the input',\r\n      },\r\n      inputMarginBottom: {\r\n        category: 'input',\r\n        value: '0',\r\n        description: 'The margin-bottom of the input',\r\n      },\r\n      inputPadding: {\r\n        category: 'input',\r\n        value: '.5rem',\r\n        description: 'The padding of the input',\r\n      },\r\n      labelColor: {\r\n        value: '#000',\r\n        category: 'label',\r\n        description: 'The font color of the label',\r\n      },\r\n      labelFontFamily: {\r\n        value: 'Arial, Helvetica, sans-serif',\r\n        category: 'label',\r\n        description: 'The font-family for the label',\r\n      },\r\n      labelFontSize: {\r\n        value: '16px',\r\n        category: 'label',\r\n        description: 'The font-size for the label',\r\n      },\r\n      labelMargin: {\r\n        value: '0 0 .25rem 0',\r\n        category: 'label',\r\n        description: 'The margin for the label',\r\n      },\r\n      strengthMeterBarHeight: {\r\n        value: '1rem',\r\n        category: 'strength meter',\r\n        description: 'The height of the blocks in the strength meter',\r\n      },\r\n      strengthMeterPadding: {\r\n        value: '.5rem 0 0',\r\n        category: 'strength meter',\r\n        description: 'The padding of the blocks in the strength meter',\r\n      },\r\n      strengthMeterInitial: {\r\n        value: '#ffffff',\r\n        category: 'strength meter',\r\n        description: 'The initial background-color of the blocks in the strength meter',\r\n      },\r\n      strengthMeterTooWeak: {\r\n        value: '#ff0000',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the blocks in the strength meter when the password is too weak',\r\n      },\r\n      strengthMeterWeak: {\r\n        value: '#ff0000',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the first block in the strength meter when the password is weak',\r\n      },\r\n      strengthMeterMedium: {\r\n        value: '#ffee00',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the first two blocks in the strength meter when the password is medium',\r\n      },\r\n      strengthMeterStrong: {\r\n        value: '#15ff00',\r\n        category: 'strength meter',\r\n        description: 'The background-color of all the blocks in the strength meter when the password is strong',\r\n      },\r\n    }\r\n  }\r\n}"
            },
            {
                "name": "NoIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    enableShowHide: false,\r\n    enableChoose: false,\r\n  },\r\n}"
            },
            {
                "name": "NoStrengthMeter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    enableStrengthMeter: false,\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "StrengthMeterDuotoneMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    strengthMeterMode: 'duotone',\r\n  },\r\n}"
            },
            {
                "name": "TextType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    type: 'text',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "PasswordBoxType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"password\" | \"text\"",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "RequiredStrength",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"1\" | \"2\" | \"3\"",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PasswordBoxComponent>",
                "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "StrengthChangedEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "StrengthMeterMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"multi\" | \"duotone\"",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TypeChangedEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "ValueChangedEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/dw-ui/src/stories/password-box.stories.ts": [
                {
                    "name": "CustomIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    iconShow: faThumbsUp,\r\n    iconHide: faThumbsDown,\r\n    iconChoose: faFaceSurprise,\r\n  },\r\n}"
                },
                {
                    "name": "CustomLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Secret word',\r\n  },\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Password',\r\n  },\r\n}"
                },
                {
                    "name": "LowStrength",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    minStrength: 2,\r\n    strengthMeterMode: 'duotone',\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PasswordBoxComponent>",
                    "defaultValue": "{\r\n  title: 'Components/password-box',\r\n  component: PasswordBoxComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    iconChoose: {\r\n      description: 'The FontAwesome icon to use for the \"choose password for me\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faPenToSquare'\r\n        },\r\n      },\r\n    },\r\n    iconChooseTitle: {\r\n      description: 'The title for the \"choose\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Generate strong password for me',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Generate strong password for me'\r\n      }\r\n    },\r\n    iconHide: {\r\n      description: 'The FontAwesome icon to use for the \"hide password\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faEyeSlash'\r\n        }\r\n      },\r\n    },\r\n    iconHideTitle: {\r\n      description: 'The title for the \"hide password\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Hide password',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Hide password',\r\n      }\r\n    },\r\n    iconShow: {\r\n      description: 'The FontAwesome icon to use for the \"show password\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'IconDefinition',\r\n        },\r\n        defaultValue: {\r\n          summary: 'faEye'\r\n        }\r\n      },\r\n    },\r\n    iconShowTitle: {\r\n      description: 'The title for the \"show password\" icon',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Show password',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Show password',\r\n      }\r\n    },\r\n    enableChoose: {\r\n      description: 'Whether to enable the \"choose password for me\" button',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    enableShowHide: {\r\n      description: 'Whether to enable the \"show/hide password\" buttons',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    enableStrengthMeter: {\r\n      description: 'Whether to enable the strength meter below the input',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    id: {\r\n      description: 'The id for the input element',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'an auto-generated UUID',\r\n        },\r\n      },\r\n    },\r\n    label: {\r\n      description: 'The text content of the label element',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Password',\r\n        },\r\n      },\r\n    },\r\n    minStrength: {\r\n      description: 'The minium strength required for the password to be valid',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'RequiredStrength (1 | 2 | 3)',\r\n        },\r\n        defaultValue: {\r\n          summary: '3',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'number',\r\n        value: 3,\r\n        max: 3,\r\n        min: 1,\r\n      },\r\n    },\r\n    onChange: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    onTouched: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    passwordStrengthChanged: {\r\n      description: 'An event emitted when the strength of the password changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'StrengthChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    passwordTypeChanged: {\r\n      description: 'An event emitted when the type attribute of the input changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'TypeChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    passwordValueChanged: {\r\n      description: 'An event emitted when the value of the input changes',\r\n      table: {\r\n        category: 'outputs',\r\n        type: {\r\n          summary: 'ValueChangedEvent',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true\r\n      }\r\n    },\r\n    registerOnChange: {\r\n      description: 'Register an onChange function',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: '(value: string) => void'\r\n        },\r\n      }\r\n    },\r\n    registerOnTouched: {\r\n      description: 'Register an onTouched function',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: '() => void'\r\n        },\r\n      }\r\n    },\r\n    setDisabledState: {\r\n      description: 'Set isDisabled to passed value',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: 'true | false'\r\n        },\r\n      }\r\n    },\r\n    strengthMeterAriaLabel: {\r\n      description: 'The aria-label for the password strength meter',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'Password strength meter',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'Password strength meter',\r\n      }\r\n    },\r\n    strengthMeterMode: {\r\n      description: 'The mode of the password strength meter',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: 'multi',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'multi',\r\n      }\r\n    },\r\n    switchToAndFocusInputAfterGenerate: {\r\n      description: 'Whether to enable behavior where the password is displayed and input is focused after generating a password',\r\n      table: {\r\n        category: 'inputs',\r\n        type: {\r\n          summary: 'boolean',\r\n        },\r\n        defaultValue: {\r\n          summary: 'true'\r\n        }\r\n      },\r\n      control: {\r\n        type: 'boolean'\r\n      },\r\n    },\r\n    switchType: {\r\n      description: 'Change the input type attribute',\r\n      table: {\r\n        category: 'methods',\r\n        type: {\r\n          summary: 'password | text'\r\n        }\r\n      },\r\n    },\r\n    type: {\r\n      description: 'The value of the type attribute on the input',\r\n      table: {\r\n        category: 'properties',\r\n        type: {\r\n          summary: 'password | text',\r\n        },\r\n        defaultValue: {\r\n          summary: '',\r\n        },\r\n      },\r\n      control: {\r\n        type: 'text',\r\n        value: 'password',\r\n      }\r\n    },\r\n    validate: {\r\n      table: {\r\n        disable: true,\r\n      },\r\n    },\r\n    value: {\r\n      description: 'The value of the input',\r\n      table: {\r\n        category: 'properties',\r\n        type: {\r\n          summary: 'string',\r\n        },\r\n        defaultValue: {\r\n          summary: '',\r\n        },\r\n      },\r\n      control: {\r\n        disable: true,\r\n      }\r\n    },\r\n  },\r\n  args: {\r\n    passwordStrengthChanged: fn(),\r\n    passwordTypeChanged: fn(),\r\n    passwordValueChanged: fn(),\r\n  },\r\n  parameters: {\r\n    cssprops: {\r\n      iconHoverColor: {\r\n        category: 'icons',\r\n        value: 'initial',\r\n        description: 'The color of the icons',\r\n      },\r\n      iconHoverFocusOpacity: {\r\n        category: 'icons',\r\n        value: '.5',\r\n        description: 'The \"hover style\" of the icons',\r\n      },\r\n      iconHoverFocusOutline: {\r\n        category: 'icons',\r\n        value: 'none',\r\n        description: 'The focus outline style of the icons',\r\n      },\r\n      inputBorderColor: {\r\n        category: 'input',\r\n        value: '#000',\r\n        description: 'The color of the border for the input',\r\n      },\r\n      inputBorderRadius: {\r\n        category: 'input',\r\n        value: '.25rem',\r\n        description: 'The border-radius of the input',\r\n      },\r\n      inputBorderStyle: {\r\n        category: 'input',\r\n        value: 'solid',\r\n        description: 'The border-style of the input',\r\n      },\r\n      inputBorderWidth: {\r\n        category: 'input',\r\n        value: '2px',\r\n        description: 'The border-width of the input',\r\n      },\r\n      inputFontFamily: {\r\n        category: 'input',\r\n        value: 'Arial, Helvetica, sans-serif',\r\n        description: 'The font-family of the input',\r\n      },\r\n      inputFontSize: {\r\n        category: 'input',\r\n        value: '16px',\r\n        description: 'The font-size of the input',\r\n      },\r\n      inputMarginBottom: {\r\n        category: 'input',\r\n        value: '0',\r\n        description: 'The margin-bottom of the input',\r\n      },\r\n      inputPadding: {\r\n        category: 'input',\r\n        value: '.5rem',\r\n        description: 'The padding of the input',\r\n      },\r\n      labelColor: {\r\n        value: '#000',\r\n        category: 'label',\r\n        description: 'The font color of the label',\r\n      },\r\n      labelFontFamily: {\r\n        value: 'Arial, Helvetica, sans-serif',\r\n        category: 'label',\r\n        description: 'The font-family for the label',\r\n      },\r\n      labelFontSize: {\r\n        value: '16px',\r\n        category: 'label',\r\n        description: 'The font-size for the label',\r\n      },\r\n      labelMargin: {\r\n        value: '0 0 .25rem 0',\r\n        category: 'label',\r\n        description: 'The margin for the label',\r\n      },\r\n      strengthMeterBarHeight: {\r\n        value: '1rem',\r\n        category: 'strength meter',\r\n        description: 'The height of the blocks in the strength meter',\r\n      },\r\n      strengthMeterPadding: {\r\n        value: '.5rem 0 0',\r\n        category: 'strength meter',\r\n        description: 'The padding of the blocks in the strength meter',\r\n      },\r\n      strengthMeterInitial: {\r\n        value: '#ffffff',\r\n        category: 'strength meter',\r\n        description: 'The initial background-color of the blocks in the strength meter',\r\n      },\r\n      strengthMeterTooWeak: {\r\n        value: '#ff0000',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the blocks in the strength meter when the password is too weak',\r\n      },\r\n      strengthMeterWeak: {\r\n        value: '#ff0000',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the first block in the strength meter when the password is weak',\r\n      },\r\n      strengthMeterMedium: {\r\n        value: '#ffee00',\r\n        category: 'strength meter',\r\n        description: 'The background-color of the first two blocks in the strength meter when the password is medium',\r\n      },\r\n      strengthMeterStrong: {\r\n        value: '#15ff00',\r\n        category: 'strength meter',\r\n        description: 'The background-color of all the blocks in the strength meter when the password is strong',\r\n      },\r\n    }\r\n  }\r\n}"
                },
                {
                    "name": "NoIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    enableShowHide: false,\r\n    enableChoose: false,\r\n  },\r\n}"
                },
                {
                    "name": "NoStrengthMeter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    enableStrengthMeter: false,\r\n  },\r\n}"
                },
                {
                    "name": "StrengthMeterDuotoneMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    strengthMeterMode: 'duotone',\r\n  },\r\n}"
                },
                {
                    "name": "TextType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    type: 'text',\r\n  },\r\n}"
                }
            ],
            "projects/dw-ui/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dw-ui/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/dw-ui/src/lib/password-box/password-box.component.ts": [
                {
                    "name": "PasswordBoxType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"password\" | \"text\"",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "RequiredStrength",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"1\" | \"2\" | \"3\"",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "StrengthChangedEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "StrengthMeterMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"multi\" | \"duotone\"",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TypeChangedEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "ValueChangedEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ],
            "projects/dw-ui/src/stories/password-box.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PasswordBoxComponent>",
                    "file": "projects/dw-ui/src/stories/password-box.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/dw-ui/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/lib/password-box/password-box.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordBoxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/51",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LowStrength",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoStrengthMeter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StrengthMeterDuotoneMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dw-ui/src/stories/password-box.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}